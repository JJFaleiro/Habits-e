// Selecionando o formul√°rio da aplica√ß√£o
const form = document.querySelector("#form-habits")
//Selecionando o bot√£o plus que fica no header
const button = document.querySelector("header button")
//Incializando a biblioteca que ser√° utilizada na aplica√ß√£o - estou criando um novo objeto e guardando na vari√°vel nlwSetup
const nlwSetup = new NLWSetup(form)

button.addEventListener("click", add)
//Evento de change - significa sempre que houver mudan√ßa neste caso no formul√°rio
form.addEventListener("change", save)


function add() {
  //Necess√°rio que seja o dia de hoje
  //const today = "01/01"
  // Para pegar a data de hoje
  // new Date() = m√©todo do JS - toLocaleDateString (Pega a data loca - MM/DD/YY) - toLocaleDateString('pt-br') (DD/MM/YY) - slice (apartir do 0 ou seja primeiro elemento da string, retire os cinco ultimos -5) (slice so funciona com string)
  const today = new Date().toLocaleDateString("pt-br").slice(0, -5)

  //M√©todo que verifica se o dia adcionado j√° existe (tamb√©m da biblioteca)
  const dayExists = nlwSetup.dayExists(today)

  //Caso dayExists - seja verdadeiro
  if (dayExists) {
    alert("Dia j√° incluso üõë")
    //Se for verdadeiro - return (Ou seja desconsidere o que vier abaixo)
    return
  }
  //Sendo falso que no caso que dizer que este dia n√£o foi inserido - ele ir√° adcionar o today (hoje) na aplica√ß√£o
  //Este m√©todo que √© uma fun√ß√£o dentro de um objeto neste caso da biblioteca criada (Cria um dia para os h√°bitos)
  nlwSetup.addDay(today)
  alert("Dia adicionado com sucesso ‚úÖ")
}
//Importante que o localStorage √© uma banco de dados individual de cada navegador ou seja ele s√≥ ir√° armazenar o dados do navegador que utilizar a aplica√ß√£o - sendo assim em outros dispositimo √© como se fosse uma aplica√ß√£o diferente
function save() {
  //localStorage √© um objeto que guarda na mem√≥ria do browser informa√ß√µes
  //E para guardar essa informa√ß√µes precisamos da funcionalidade do localStorage - chamada setItem que precisa de dois argumento (1¬∫ √© uma chave que vai ser usada durante qualquer necessidade da aplica√ß√£o e pode ser qualquer nome - 2¬∫ √© o dado que ser√° armazenado - neste caso em quest√£o estamos utilizando um m√©todo da biblioteca que ir√° nos retornar um dado (data) em formato de objeto para armazenar a a data e o controle do habito como utilizamos no objeto la em baixo comentado - ele cria uma propriedade com valores que correspondem ao dia marcado const data {}) - p√≥rem temos que transformar este objeto em string para que ele seja armazenado no localStorage (√© necess√°rio que seja string) e para isso usamos um m√©todo do JSON o .stringify (que ira transformar todo o objeto em string)
  localStorage.setItem("NLWSetup@habits", JSON.stringify(nlwSetup.data))
}

//Aqui nos criamos uma vari√°vel que ir√° armazenar este dado do localStorage - para criar a tabela dos h√°bitos no navegador atrav√©s do m√©todo da biblioteca setData(que como argumento ir√° utilizar do dado armazenado no localStorage - nlwSetup.data) p√≥rem para que esta constru√ß√£o ocorra √© necess√°rio que seja um objeto - e para isso usamos o localStorage e atrav√©s do .getItem(que recebe como argumento a chave da aplica√ß√£o criada na fun√ß√£o save) para selecionar os elementos guardados na mem√≥ria do navegador - e para transforma-los em objeto novamente utilizamos novamente o JSON, mas agora .parse (para transformar o dado do tipo string em objeto)
//Caso n√£o tenha nada ||(ou) guarde um objeto vazio {} - para n√£o acarretar erros no nlwSetup.setData(data)
const data = JSON.parse(localStorage.getItem("NLWSetup@habits")) || {}
nlwSetup.setData(data)
//E para inicializar/carregar todo a aplica√ß√£o utilizamos .load (m√©todo t√°mbem da biblioteca para isso) - Ele carregar√° os dados internos e renderizar√° o layout que foi criado pelo setData acima atr√°ves do data
nlwSetup.load()

//N√ÉO PODE SER INSERIDO MANUALMENTE E SIM POR FUN√á√ïES CLICAVEIS
//Dados para construir a tabela de c√≥digo - De acordo com a biblioteca estamos criando um objeto com propriedades que devem ter o mesmo nome do data-name (propriedade dos habit no HTML) no formato MM-DD (M√™s-Dia) - Observa√ß√£o os dias est√£o sendo criados e de acordo com as datas inseridas nas propriedades do objeto elas ficam marcadas na aplica√ß√£o
// const data = {
//   run: ["01-01", "01-02", "01-06"],
//   water: ["01-04", "01-08"],
//   food: ["01-05", "01-07"],
//   journal: ["01-03"],
//   takePills: ["01-02"]
// }

//Acessando a fun√ß√£o dentro do objeto nlwSetup - para gerar a tabela do habitos no projeto - que utilizara o objeto 'data' acima como parametros para o c√≥digo
// nlwSetup.setData(data)

//Ele carregar√° os dados internos e renderizar√° o layout que foi criado pelo setData acima atr√°ves do data
// nlwSetup.load()
